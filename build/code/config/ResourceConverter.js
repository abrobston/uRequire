// Generated by CoffeeScript 1.6.3
var ResourceConverter, UError, l, upath, _, _B,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('lodash');

_B = require('uberscore');

l = new _B.Logger('urequire/config/ResourceConverter', 0);

upath = require('../paths/upath');

UError = require('../utils/UError');

ResourceConverter = (function() {
  var getResourceConverterObject, nameFlags, nameFlagsActions;

  function ResourceConverter(rc) {
    rc = getResourceConverterObject(rc);
    if (_B.isHash(rc)) {
      this.update(rc);
    } else {
      return {};
    }
  }

  ResourceConverter.prototype.update = function(rc) {
    if (rc !== this) {
      _.extend(this, rc);
      if (this.isModule) {
        l.warn("DEPRACATED key 'isModule' found in ResourcesConverter with `name: '" + rc.name + "'`. Use `type: 'module'` instead.");
        rc.type = 'module';
      }
      this.descr || (this.descr = "No descr for ResourceConverter '" + this.name + "'");
      if (this.isTerminal == null) {
        this.isTerminal = false;
      }
      if (this.isAfterTemplate == null) {
        this.isAfterTemplate = false;
      }
      if (this.isBeforeTemplate == null) {
        this.isBeforeTemplate = false;
      }
      if (this.isMatchSrcFilename == null) {
        this.isMatchSrcFilename = false;
      }
    }
    return this;
  };

  ResourceConverter.prototype.clone = function() {
    var rc;
    rc = _.clone(this, true);
    if (this[' convFilename']) {
      rc.convFilename = this[' convFilename'];
    }
    return new ResourceConverter(rc);
  };

  Object.defineProperties(ResourceConverter.prototype, {
    name: {
      get: function() {
        return this[' name'];
      },
      set: function(name) {
        var flag, oldName, uerr, _ref;
        if ((!name) || !_.isString(name)) {
          l.er(uerr = "ResourceConverter `name` should be a unique, non empty String - was '" + name + "'");
          throw new UError(uerr);
        }
        while (_ref = (flag = name[0]), __indexOf.call(nameFlags, _ref) >= 0) {
          nameFlagsActions[flag](this);
          name = name.slice(1);
        }
        oldName = this[' name'];
        if ((ResourceConverter.registry[oldName] === this) && (name !== oldName)) {
          l.warn("Renaming RC '" + oldName + "' to '" + name + "' on ResourceConverter.registry.");
          delete ResourceConverter.registry[oldName];
          ResourceConverter.registry[name] = this;
        }
        return this[' name'] = name;
      }
    },
    type: {
      get: function() {
        return this[' type'];
      },
      set: function(type) {
        var types, uerr;
        if (__indexOf.call(types = ['bundle', 'file', 'text', 'module'], type) < 0) {
          l.er(uerr = "Invalid resourceConverter.type '" + type + "' - must be in [" + (types.join(',')) + "]");
          throw new UError(uerr);
        }
        return this[' type'] = type;
      }
    },
    clazz: {
      get: function() {
        switch (this.type) {
          case 'bundle':
            return require('../fileResources/BundleFile');
          case 'file':
            return require('../fileResources/FileResource');
          case 'text':
            return require('../fileResources/TextResource');
          case 'module':
            return require('../fileResources/Module');
        }
      }
    },
    convFilename: {
      enumerable: true,
      get: function() {
        return this._convFilename;
      },
      set: function(cf) {
        var isSrcFilename, uerr;
        if (cf) {
          this[' convFilename'] = cf;
          if (_.isString(cf)) {
            if (cf[0] === '~') {
              cf = cf.slice(1);
              isSrcFilename = true;
            }
            if (cf[0] === '.') {
              cf = (function(ext) {
                return function(dstFilename, srcFilename) {
                  return upath.changeExt((isSrcFilename ? srcFilename : dstFilename), ext);
                };
              })(cf);
            } else {
              cf = (function(filename) {
                return function() {
                  return filename;
                };
              })(cf);
            }
          } else {
            if (!(_.isFunction(cf) || _.isUndefined(cf))) {
              l.er(uerr = "ResourceConverter error: `convFilename` is neither String|Function|Undefined.");
              throw new UError(uerr, {
                nested: err
              });
            }
          }
          return this._convFilename = cf;
        }
      }
    }
  });

  /* ResourceConverters Registry functions*/


  ResourceConverter.registry = require('./ResourceConverters').extraResourceConverters;

  ResourceConverter.searchRegisterUpdate = function(rc) {
    var name, rcFound, rcResult, _ref;
    if (_.isString(rc)) {
      name = rc;
      while (_ref = name[0], __indexOf.call(nameFlags, _ref) >= 0) {
        name = name.slice(1);
      }
      if (rcResult = ResourceConverter.registry[name]) {
        if (!(rcResult instanceof ResourceConverter)) {
          rcResult = ResourceConverter.registry[name] = new ResourceConverter(rcResult);
        }
        rcResult.name = rc;
      } else {
        throw new UError("ResourceConverter not found in registry with name = " + name + ", searchNameOrRC = " + searchNameOrRC);
      }
    } else {
      if (!(rc instanceof ResourceConverter)) {
        rcResult = rc = new ResourceConverter(rc);
      }
      if (rc && !_.isEmpty(rc)) {
        if (rcFound = ResourceConverter.registry[rc.name]) {
          if (!(rcFound instanceof ResourceConverter)) {
            rcFound = new ResourceConverter(rcFound);
          }
          rcResult = ResourceConverter.registry[rc.name] = rcFound.update(rc);
        } else {
          rcResult = ResourceConverter.registry[rcResult.name] = rc;
        }
      }
    }
    return rcResult;
  };

  getResourceConverterObject = function(rc) {
    var convFilename, convert, descr, filez, name, uerr, _ref, _ref1;
    if (_.isFunction(rc)) {
      rc = rc.call(ResourceConverter.searchRegisterUpdate, ResourceConverter.searchRegisterUpdate);
      return getResourceConverterObject(rc);
    }
    if (_.isString(rc)) {
      return getResourceConverterObject(ResourceConverter.searchRegisterUpdate(rc));
    }
    if (_.isArray(rc)) {
      if (_.isString(rc[1]) && (_.isArray(rc[2]) || _.isString(rc[2]) || _.isRegExp(rc[2]))) {
        _ref = [rc[0], rc[1], rc[2], rc[3], rc[4]], name = _ref[0], descr = _ref[1], filez = _ref[2], convert = _ref[3], convFilename = _ref[4];
      } else {
        _ref1 = [rc[0], rc[1], rc[2], rc[3]], name = _ref1[0], filez = _ref1[1], convert = _ref1[2], convFilename = _ref1[3];
      }
      rc = {
        name: name,
        descr: descr,
        filez: filez,
        convert: convert,
        convFilename: convFilename
      };
    }
    if (rc && !_B.isHash(rc)) {
      l.er(uerr = 'Bogus resourceConverter:', rc);
      throw new UError(uerr);
    }
    return rc;
  };

  nameFlagsActions = {
    '&': function(rc) {
      return rc.type = 'bundle';
    },
    '@': function(rc) {
      return rc.type = 'file';
    },
    '#': function(rc) {
      return rc.type = 'text';
    },
    '$': function(rc) {
      return rc.type = 'module';
    },
    '~': function(rc) {
      return rc.isMatchSrcFilename = true;
    },
    '|': function(rc) {
      return rc.isTerminal = true;
    },
    '*': function(rc) {
      return rc.isTerminal = false;
    },
    '+': function(rc) {
      return rc.isBeforeTemplate = true;
    },
    '!': function(rc) {
      return rc.isAfterTemplate = true;
    }
  };

  nameFlags = _.keys(nameFlagsActions);

  return ResourceConverter;

})();

module.exports = ResourceConverter;
