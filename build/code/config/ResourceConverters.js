// Generated by CoffeeScript 1.6.3
var defaultResourceConverters, extraResourceConverters, l, _;

(function(modyle) {
  return modyle.replaceCode('if (l.deb()){}');
});

defaultResourceConverters = [
  {
    name: '$javascript',
    descr: "Dummy js converter, justs marks `.js` files as `Module`s.",
    filez: ['**/*.js', /.*\.(javascript)$/],
    convert: function(r) {
      return r.source;
    },
    convFilename: function(srcFilename) {
      return (require('../paths/upath')).changeExt(srcFilename, 'js');
    },
    type: 'module',
    isAfterTemplate: false,
    isTerminal: false,
    isMatchSrcFilename: false
  }, [
    '$coffee-script', "Coffeescript compiler, using locally installed 'coffee-script'.", ['**/*.coffee', /.*\.(coffee\.md|litcoffee)$/i], function(r) {
      var coffee;
      coffee = require('coffee-script');
      return coffee.compile(r.source);
    }, function(srcFn) {
      var coffeeExtensions, ext;
      coffeeExtensions = /.*\.(coffee\.md|litcoffee|coffee)$/;
      ext = srcFn.replace(coffeeExtensions, "$1");
      return srcFn.replace(new RegExp(ext + '$'), 'js');
    }
  ], [
    '$LiveScript', ['**/*.ls'], function(r) {
      return (require('LiveScript')).compile(r.source);
    }, '.js'
  ], [
    '$iced-coffee-script', ['**/*.iced'], (function(r) {
      return require('iced-coffee-script').compile(r.source);
    }), '.js'
  ], [
    '$coco', ['**/*.co'], (function(r) {
      return require('coco').compile(r.source);
    }), '.js'
  ]
];

_ = require('lodash');

l = new (require('uberscore')).Logger('urequire/ResourceConverters');

extraResourceConverters = {
  teacup: [
    '@~teacup', "Renders teacup as nodejs modules (exporting the template function or a `renderable`), to HTML.\n`FileResource` means the file's source is not read on resource.refresh().", ['**/*.teacup'], (function() {
      require.extensions['.teacup'] = require.extensions['.coffee'];
      return function(r) {
        var template;
        template = r.requireUncached(r.srcRealpath);
        return (require('teacup')).render(template);
      };
    })(), '.html'
  ],
  execSync: function() {
    return (function() {
      var execSync;
      execSync = require('execSync');
      return [
        '@~execSync', [], function(r) {
          var command, procFilename, result;
          procFilename = this.srcMain ? r.bundle.path + '/' + this.srcMain : r.srcFilepath;
          command = (function() {
            if (_.isString(this.cmd)) {
              return "" + this.cmd + " " + procFilename;
            } else {
              if (_.isFunction(this.cmd)) {
                return this.cmd(procFilename);
              } else {
                throw "execSync derived ResourceConverter '" + this.name + "'\n`cmd` is not String or Function. `cmd` = " + this.cmd;
              }
            }
          }).call(this);
          l.debug(50, 'execSync.exec: "' + command + '"');
          result = execSync.exec(command);
          if (result.code !== 0) {
            throw result.stdout;
          }
          return result.stdout;
        }
      ];
    })();
  },
  lessc: function() {
    return _.extend((this('@execSync')).clone(), {
      name: 'lessc',
      filez: 'less/*.*',
      cmd: 'lessc',
      srcMain: 'less/main.less',
      convFilename: 'css/main.css'
    });
  }
};

module.exports = {
  defaultResourceConverters: defaultResourceConverters,
  extraResourceConverters: extraResourceConverters
};
