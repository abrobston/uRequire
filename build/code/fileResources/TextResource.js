// Generated by CoffeeScript 1.6.3
var FileResource, TextResource, UError, l, _, _B, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('lodash');

_B = require('uberscore');

l = new _B.Logger('urequire/fileResources/TextResource');

FileResource = require('./FileResource');

UError = require('../utils/UError');

/*
  Represents a FileResource that is any *textual/utf-8* resource (including but not limited to js-convertable code).

  It knows how to `refresh()` its `source` and `reset` it:

  Each time it `@refresh()`es, if parent & `@source` (content) in source file is changed, its passed through all @converters.
*/


TextResource = (function(_super) {
  __extends(TextResource, _super);

  function TextResource() {
    _ref = TextResource.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
    Check if source (AS IS eg js, coffee, LESS etc) has changed
    and if it has, then convert it passing throught all @converters
  
    @return true if there was a change (and conversions took place) and note as @hasChanged, false otherwise
  */


  TextResource.prototype.refresh = function() {
    var source;
    if (!TextResource.__super__.refresh.apply(this, arguments)) {
      return false;
    } else {
      source = this.read();
      if (source && (this.source !== source)) {
        this.source = source;
        this.converted = this.source;
        this.dstFilename = this.srcFilename;
        return this.hasChanged = this.runResourceConverters(function(rc) {
          return !rc.isBeforeTemplate && !rc.isAfterTemplate;
        });
      } else {
        if (l.deb(90)) {
          l.debug("No changes in `source` of TextResource/" + this.constructor.name + " '" + this.srcFilename + "' ");
        }
        return this.hasChanged = false;
      }
    }
  };

  TextResource.prototype.reset = function() {
    TextResource.__super__.reset.apply(this, arguments);
    return delete this.source;
  };

  return TextResource;

})(FileResource);

module.exports = TextResource;
