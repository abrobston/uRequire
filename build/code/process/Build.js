// Generated by CoffeeScript 1.6.3
var Build, BundleFile, DependenciesReporter, FileResource, MasterDefaultsConfig, Module, TextResource, UError, fs, l, upath, _, _B,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('lodash');

fs = require('fs');

_B = require('uberscore');

l = new _B.Logger('urequire/process/Build');

upath = require('../paths/upath');

DependenciesReporter = require('./../utils/DependenciesReporter');

MasterDefaultsConfig = require('../config/MasterDefaultsConfig');

UError = require('../utils/UError');

TextResource = require('../fileResources/TextResource');

BundleFile = require('./../fileResources/BundleFile');

FileResource = require('./../fileResources/FileResource');

TextResource = require('./../fileResources/TextResource');

Module = require('./../fileResources/Module');

module.exports = Build = (function(_super) {
  __extends(Build, _super);

  Build.calcProperties = {
    changedModules: function() {
      return _.pick(this._changed, function(f) {
        return f instanceof Module;
      });
    },
    changedResources: function() {
      return _.pick(this._changed, function(f) {
        return f instanceof FileResource;
      });
    },
    errorFiles: function() {
      return _.pick(this._changed, function(f) {
        return f.hasErrors;
      });
    },
    changedFiles: function() {
      return this._changed;
    }
  };

  function Build(buildCfg) {
    Build.__super__.constructor.apply(this, arguments);
    _.extend(this, buildCfg);
    this.count = 0;
    if (!this.out) {
      this.out = FileResource.save;
    }
    if (this.template.name === 'combined') {
      this.combinedFile = upath.changeExt(this.dstPath, '.js');
      this.dstPath = "" + this.combinedFile + "___temp";
      if (l.deb(30)) {
        l.debug("Setting `build.combinedFile` = " + this.combinedFile + " and `build.dstPath` = " + this.dstPath);
      }
    }
  }

  Build.templates = ['UMD', 'AMD', 'nodejs', 'combined'];

  Build.prototype.newBuild = function() {
    this.startDate = new Date();
    this.count++;
    this.current = {};
    this._changed = {};
    return this.cleanProps();
  };

  Build.prototype.addChangedBundleFile = function(filename, bundleFile) {
    return this._changed[filename] = bundleFile;
  };

  Build.prototype.report = function(bundle) {
    var interestingDepTypes, report, _ref, _ref1;
    l.verbose("Report for `build` #" + this.count + ":");
    interestingDepTypes = ['notFoundInBundle', 'untrusted'];
    if (!_.isEmpty(report = bundle.reporter.getReport(interestingDepTypes))) {
      l.warn("Dependency types report for `build` #" + this.count + ":\n", report);
    }
    l.verbose("Changed: " + (_.size(this.changedResources)) + " resources of which " + (_.size(this.changedModules)) + " were modules.");
    if (((_ref = this._copied) != null ? _ref[0] : void 0) || ((_ref1 = this._copied) != null ? _ref1[1] : void 0)) {
      l.verbose("Copied " + this._copied[0] + " files, Skipped copying " + this._copied[1] + " files.");
    }
    if (_.size(bundle.errorFiles)) {
      l.er("" + (_.size(bundle.errorFiles)) + " files/resources/modules still with errors totally in the bundle.");
    }
    if (_.size(this.errorFiles)) {
      l.er("" + (_.size(this.errorFiles)) + " files/resources/modules with errors in this build.");
      return l.er("Build #" + this.count + " finished with errors in " + ((new Date() - this.startDate) / 1000) + "secs.");
    } else {
      return l.verbose("Build #" + this.count + " finished succesfully in " + ((new Date() - this.startDate) / 1000) + "secs.");
    }
  };

  return Build;

})(_B.CalcCachedProperties);
