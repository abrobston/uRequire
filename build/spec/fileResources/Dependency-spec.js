// Generated by CoffeeScript 1.6.3
var Dependency, areEqual, areLike, areRLike, assert, chai, expect, untrust, _, _ref;

_ = require('lodash');

chai = require('chai');

assert = chai.assert;

expect = chai.expect;

_ref = require('../helpers'), areEqual = _ref.areEqual, areLike = _ref.areLike, areRLike = _ref.areRLike, untrust = _ref.untrust;

Dependency = require("../../code/fileResources/Dependency");

describe("Dependency:", function() {
  describe("init & and extracting data:", function() {
    it("split plugin, extension, resourceName & recostruct as String", function() {
      var dep, depString;
      dep = new Dependency(depString = 'somePlugin!somedir/dep.js');
      expect(dep.pluginName).to.equal('somePlugin');
      expect(dep.extname).to.equal('.js');
      expect(dep.name()).to.equal('somePlugin!somedir/dep.js');
      expect(dep.toString()).to.equal(depString);
      return expect(dep.name({
        plugin: false,
        ext: false
      })).to.equal('somedir/dep');
    });
    return it("'node' is not considered a plugin - its just a flag", function() {
      var dep, depString;
      dep = new Dependency(depString = 'node!somedir/dep.js');
      expect(dep.pluginName).to.equal('node');
      expect(dep.name()).to.equal('somedir/dep.js');
      expect(dep.toString()).to.equal(depString);
      expect(dep.depString).to.equal(depString);
      return expect(dep.name({
        plugin: true,
        ext: true
      })).to.equal('somedir/dep.js');
    });
  });
  describe("uses module.path & bundle.dstFilenames:", function() {
    describe("converts from (unormalized) fileRelative to bundleRelative:", function() {
      var dep, depString;
      dep = new Dependency(depString = './.././../../rootdir//dep', {
        path: 'path/from/bundleroot/module.path.js',
        bundle: {
          dstFilenames: ['rootdir/dep.js']
        }
      });
      it("knows basic dep data", function() {
        expect(dep.extname).to.equal(void 0);
        return expect(dep.pluginName).to.equal(void 0);
      });
      it("knows dep is found", function() {
        return expect(dep.isFound).to.equal(true);
      });
      it("dep.type is 'bundle'", function() {
        return expect(dep.type).to.equal('bundle');
      });
      it("calculates bundleRelative", function() {
        return expect(dep.name({
          relative: 'bundle'
        })).to.equal('rootdir/dep');
      });
      it("calculates a normalized fileRelative", function() {
        return expect(dep.name({
          relative: 'file'
        })).to.equal('../../../rootdir/dep');
      });
      return it("returns depString as toString()", function() {
        return expect(dep.toString()).to.equal(depString);
      });
    });
    describe("converts from bundleRelative to fileRelative:", function() {
      var dep, depString;
      dep = new Dependency(depString = 'path/from/bundleroot/to/some/nested/module', {
        path: 'path/from/bundleroot/module.path',
        bundle: {
          dstFilenames: ['path/from/bundleroot/to/some/nested/module.js']
        }
      });
      it("knows dep is found", function() {
        return expect(dep.isFound).to.equal(true);
      });
      it("dep.type is 'bundle'", function() {
        return expect(dep.type).to.equal('bundle');
      });
      it("calculates as-is bundleRelative", function() {
        return expect(dep.name({
          relative: 'bundle'
        })).to.equal('path/from/bundleroot/to/some/nested/module');
      });
      return it("calculates a fileRelative", function() {
        return expect(dep.name({
          relative: 'file'
        })).to.equal('./to/some/nested/module');
      });
    });
    return describe("Changing its depString and module.path:", function() {
      describe("changes the calculation of paths:", function() {
        var dep;
        dep = new Dependency('path/to/module', {
          path: 'someRootModule',
          bundle: {
            dstFilenames: ['path/to/module.js', 'path/to/another/module.js']
          }
        });
        dep.depString = 'path/to/another/module';
        dep.module.path = 'some/non/rootModule.js';
        it("knows dep is found", function() {
          return expect(dep.isFound).to.equal(true);
        });
        it("dep.type is 'bundle'", function() {
          return expect(dep.type).to.equal('bundle');
        });
        it("calculates as-is bundleRelative", function() {
          return expect(dep.name({
            relative: 'bundle'
          })).to.equal('path/to/another/module');
        });
        return it("calculates fileRelative", function() {
          return expect(dep.name({
            relative: 'file'
          })).to.equal('../../path/to/another/module');
        });
      });
      return describe("changes the calculation of paths, with plugin present:", function() {
        var dep;
        dep = new Dependency('plugin!path/to/module', {
          path: 'someRootModule',
          bundle: {
            dstFilenames: ['path/to/module.js', 'path/to/another/module.js']
          }
        });
        dep.depString = 'path/to/another/module';
        dep.module.path = 'some/non/rootModule.js';
        it("knows dep is found", function() {
          return expect(dep.isFound).to.equal(true);
        });
        it("dep.type is 'bundle'", function() {
          return expect(dep.type).to.equal('bundle');
        });
        it("calculates as-is bundleRelative with the same plugin", function() {
          return expect(dep.name({
            relative: 'bundle'
          })).to.equal('plugin!path/to/another/module');
        });
        return it("calculates fileRelative with the same plugin ", function() {
          return expect(dep.name({
            relative: 'file'
          })).to.equal('plugin!../../path/to/another/module');
        });
      });
    });
  });
  describe("isEquals():", function() {
    var anotherMod, dep1, dep2, dep3, depPlugin, glob, mod;
    mod = {
      path: 'path/from/bundleroot/module.path.js',
      bundle: {
        bundle: {
          dstFilenames: ['rootdir/dep.js']
        }
      }
    };
    anotherMod = {
      path: 'another/bundleroot/module2.js',
      bundle: {
        dstFilenames: ['rootdir/dep.js']
      }
    };
    dep1 = new Dependency('.././../../rootdir/dep.js', mod);
    dep2 = new Dependency('rootdir/dep', mod);
    dep3 = new Dependency('../.././rootdir///dep', anotherMod);
    depPlugin = new Dependency('somePlugin!rootdir/dep', mod);
    glob = new Dependency('globalDep', mod);
    it("recognises 'global' type equality", function() {
      expect(glob.isEqual('globalDep')).to.be["true"];
      return expect(glob.isEqual('./globalDep')).to.be["false"];
    });
    it("With `Dependency` as param", function() {
      expect(dep1.isEqual(dep2)).to.be["true"];
      expect(dep2.isEqual(dep1)).to.be["true"];
      expect(dep1.isEqual(dep3)).to.be["true"];
      return expect(dep3.isEqual(dep2)).to.be["true"];
    });
    it("false when plugin differs", function() {
      expect(dep1.isEqual(depPlugin)).to.be["false"];
      expect(dep2.isEqual(depPlugin)).to.be["false"];
      return expect(dep3.isEqual(depPlugin)).to.be["false"];
    });
    return describe("With `String` as param:", function() {
      describe(" with `bundleRelative` format:", function() {
        describe("with .js extensions", function() {
          return it("matches alike", function() {
            expect(dep1.isEqual('rootdir/dep.js')).to.be["true"];
            expect(dep2.isEqual('rootdir/dep.js')).to.be["true"];
            return expect(dep3.isEqual('rootdir/dep.js')).to.be["true"];
          });
        });
        describe("plugins still matter:", function() {
          it("they make a difference", function() {
            expect(dep1.isEqual('somePlugin!rootdir/dep.js')).to.be["false"];
            expect(dep2.isEqual('somePlugin!rootdir/dep.js')).to.be["false"];
            return expect(dep3.isEqual('somePlugin!rootdir/dep.js')).to.be["false"];
          });
          return it("they only match same plugin name:", function() {
            expect(depPlugin.isEqual('somePlugin!rootdir/dep.js')).to.be["true"];
            return expect(depPlugin.isEqual('someOtherPlugin!rootdir/dep.js')).to.be["false"];
          });
        });
        return describe("without extensions:", function() {
          it("matches alike", function() {
            expect(dep1.isEqual('rootdir/dep')).to.be["true"];
            expect(dep2.isEqual('rootdir/dep')).to.be["true"];
            return expect(dep3.isEqual('rootdir/dep')).to.be["true"];
          });
          return describe("plugins still matter:", function() {
            it("they make a difference", function() {
              expect(dep1.isEqual('somePlugin!rootdir/dep')).to.be["false"];
              expect(dep2.isEqual('somePlugin!./rootdir/dep')).to.be["false"];
              return expect(dep3.isEqual('somePlugin!rootdir/dep')).to.be["false"];
            });
            return it("they only match same plugin name:", function() {
              expect(depPlugin.isEqual('somePlugin!rootdir/dep')).to.be["true"];
              expect(depPlugin.isEqual('somePlugin!../../../rootdir/dep')).to.be["true"];
              return expect(depPlugin.isEqual('someOtherPlugin!rootdir/dep')).to.be["false"];
            });
          });
        });
      });
      describe(" with `fileRelative` format, it matches relative path from same module distance", function() {
        it("with .js extensions", function() {
          expect(dep1.isEqual('../../../rootdir/dep.js')).to.be["true"];
          expect(dep2.isEqual('../../../rootdir/dep.js')).to.be["true"];
          return expect(dep3.isEqual('../../rootdir/dep.js')).to.be["true"];
        });
        it("with .js extensions & unormalized paths", function() {
          expect(dep1.isEqual('./../../../rootdir/dep.js')).to.be["true"];
          expect(dep2.isEqual('.././../../rootdir/dep.js')).to.be["true"];
          return expect(dep3.isEqual('./../../rootdir/dep.js')).to.be["true"];
        });
        it("plugins still matter", function() {
          expect(depPlugin.isEqual('somePlugin!../../../rootdir/dep.js')).to.be["true"];
          return expect(depPlugin.isEqual('someOtherPlugin!../../../rootdir/dep.js')).to.be["false"];
        });
        it("plugins still matter with unormalized paths", function() {
          expect(depPlugin.isEqual('somePlugin!./.././../../rootdir/dep.js')).to.be["true"];
          return expect(depPlugin.isEqual('somePlugin!./.././../../rootdir/dep.js')).to.be["true"];
        });
        it("without extensions", function() {
          expect(dep1.isEqual('./../../../rootdir/dep')).to.be["true"];
          expect(dep2.isEqual('./../../../rootdir/dep')).to.be["true"];
          return expect(dep3.isEqual('../.././rootdir/./dep')).to.be["true"];
        });
        return it("plugins still matter", function() {
          expect(depPlugin.isEqual('somePlugin!./../../../rootdir/dep')).to.be["true"];
          return expect(depPlugin.isEqual('someOtherPlugin!../../../rootdir/dep')).to.be["false"];
        });
      });
      it("with false extensions", function() {
        expect(dep1.isEqual('rootdir/dep.txt')).to.be["false"];
        expect(dep2.isEqual('../../../rootdir/dep.txt')).to.be["false"];
        return expect(dep3.isEqual('../../rootdir/dep.txt')).to.be["false"];
      });
      return it("looking for one in an array", function() {
        var dependencies;
        dependencies = [dep1, dep2, depPlugin];
        return expect(_.any(dependencies, function(dep) {
          return dep.isEqual('rootdir/dep.js');
        })).to.be["true"];
      });
    });
  });
  return describe("resolving all types bundle/file relative, external, global, notFound, webRootMap:", function() {
    var dep, dependencies, expected, mod, strDependencies, _i, _len;
    mod = {
      path: 'actions/greet',
      bundle: {
        dstFilenames: ['main.js', 'actions/greet.js', 'actions/moreactions/say.js', 'calc/add.js', 'calc/multiply.js', 'data/numbers.js', 'data/messages/bye.js', 'data/messages/hello.js']
      }
    };
    strDependencies = ['underscore', 'data/messages/hello.js', './/..//data//messages/bye', './moreactions/say.js', '../lame/dir.js', '.././../some/external/lib.js', '/assets/jpuery-max', 'require', 'module', 'exports'];
    dependencies = [];
    for (_i = 0, _len = strDependencies.length; _i < _len; _i++) {
      dep = strDependencies[_i];
      dependencies.push(new Dependency(dep, mod));
    }
    dependencies.push(new Dependency('"main"+".js"', mod, true));
    expected = {
      bundleRelative: untrust([10], ['underscore', 'data/messages/hello', 'data/messages/bye', 'actions/moreactions/say', 'lame/dir.js', '../../some/external/lib.js', '/assets/jpuery-max', 'require', 'module', 'exports', '"main"+".js"']),
      fileRelative: untrust([10], ['underscore', '../data/messages/hello', '../data/messages/bye', './moreactions/say', '../lame/dir.js', '../../some/external/lib.js', '/assets/jpuery-max', 'require', 'module', 'exports', '"main"+".js"']),
      global: ['underscore'],
      external: ['../../some/external/lib.js'],
      notFoundInBundle: ['../lame/dir.js'],
      webRootMap: ['/assets/jpuery-max'],
      system: ['require', 'module', 'exports'],
      untrusted: untrust([0], ['"main"+".js"'])
    };
    it("using dep.isXXX:", function() {
      var bundleRelative, d, external, fileRelative, global, notFoundInBundle, system, untrusted, webRootMap;
      fileRelative = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          _results.push(d.name({
            relative: 'file'
          }));
        }
        return _results;
      })();
      bundleRelative = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          _results.push(d.name({
            relative: 'bundle'
          }));
        }
        return _results;
      })();
      global = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.isGlobal) {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      external = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.isExternal) {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      notFoundInBundle = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.isNotFoundInBundle) {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      webRootMap = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.isWebRootMap) {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      system = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.isSystem) {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      untrusted = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.isUntrusted) {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      return expect(areEqual({
        bundleRelative: bundleRelative,
        fileRelative: fileRelative,
        global: global,
        external: external,
        notFoundInBundle: notFoundInBundle,
        webRootMap: webRootMap,
        system: system,
        untrusted: untrusted
      }, expected)).to.be["true"];
    });
    return it("using dep.type:", function() {
      var bundleRelative, d, external, fileRelative, global, notFoundInBundle, system, untrusted, webRootMap;
      fileRelative = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          _results.push(d.name({
            relative: 'file'
          }));
        }
        return _results;
      })();
      bundleRelative = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          _results.push(d.name({
            relative: 'bundle'
          }));
        }
        return _results;
      })();
      global = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.type === 'global') {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      external = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.type === 'external') {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      notFoundInBundle = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.type === 'notFoundInBundle') {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      webRootMap = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.type === 'webRootMap') {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      system = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.type === 'system') {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      untrusted = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dependencies.length; _j < _len1; _j++) {
          d = dependencies[_j];
          if (d.type === 'untrusted') {
            _results.push(d.name());
          }
        }
        return _results;
      })();
      return expect(areEqual({
        bundleRelative: bundleRelative,
        fileRelative: fileRelative,
        global: global,
        external: external,
        notFoundInBundle: notFoundInBundle,
        webRootMap: webRootMap,
        system: system,
        untrusted: untrusted
      }, expected)).to.be["true"];
    });
  });
});
