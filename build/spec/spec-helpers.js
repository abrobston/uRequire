// Generated by CoffeeScript 1.6.3
var are, chai, deepEqual, equal, exact, expect, fals, iqual, ixact, l, like, likeBA, notDeepEqual, notEqual, notExact, notIqual, notIxact, notLike, notLikeBA, ok, tru, _B;

_B = require('uberscore');

l = new _B.Logger('spec/helpers');

chai = require('chai');

expect = chai.expect;

equal = function(a, b) {
  return expect(a).to.equal(b);
};

notEqual = function(a, b) {
  return expect(a).to.not.equal(b);
};

ok = function(a) {
  return expect(a).to.be.ok;
};

tru = function(a) {
  return expect(a).to.be["true"];
};

fals = function(a) {
  return expect(a).to.be["false"];
};

/* using _B.isXXX to construct some helpers*/


are = function(name, asEqual) {
  if (asEqual == null) {
    asEqual = true;
  }
  return function(a, b) {
    var isEq, path;
    isEq = _B[name](a, b, {
      path: (path = []),
      allProps: true,
      exclude: ['inspect']
    });
    if (asEqual) {
      if (!isEq) {
        l.warn("Discrepancy, expected true from _B." + name + " \n at path: ", path.join('.'), '\n left Object = ', _B.getp(a, path), '\n right Object =', _B.getp(b, path));
      }
    } else {
      if (isEq) {
        l.warn("Discrepancy, expected false from _B." + name + ",", '\n left Object = ', _B.getp(a, path), '\n right Object =', _B.getp(b, path));
      }
    }
    if (asEqual) {
      return expect(isEq).to.be["true"];
    } else {
      return expect(isEq).to.be["false"];
    }
  };
};

deepEqual = are('isEqual');

notDeepEqual = are('isEqual', false);

exact = are('isExact');

notExact = are('isExact', false);

iqual = are('isIqual');

notIqual = are('isIqual', false);

ixact = are('isIxact');

notIxact = are('isIxact', false);

like = are('isLike');

notLike = are('isLike', false);

likeBA = function(a, b) {
  return like(b, a);
};

notLikeBA = function(a, b) {
  return notLike(b, a);
};

module.exports = {
  equal: equal,
  notEqual: notEqual,
  tru: tru,
  fals: fals,
  ok: ok,
  deepEqual: deepEqual,
  notDeepEqual: notDeepEqual,
  exact: exact,
  notExact: notExact,
  iqual: iqual,
  notIqual: notIqual,
  ixact: ixact,
  notIxact: notIxact,
  like: like,
  notLike: notLike,
  likeBA: likeBA,
  notLikeBA: notLikeBA
};
