// Generated by CoffeeScript 1.6.3
var MasterDefaultsConfig, ResourceConverter, arrayizePushBlender, blendConfigs, bundleBuildBlender, deepEqual, dependenciesBindingsBlender, depracatedKeysBlender, equal, expectedResources, l, likeAB, likeBA, moveKeysBlender, notEqual, ok, resources, templateBlender, _, _B, _ref;

_B = require('uberscore');

l = new _B.Logger('urequire/blendConfigs-spec');

_ = require('lodash');

blendConfigs = require('../../code/config/blendConfigs');

MasterDefaultsConfig = require('../../code/config/MasterDefaultsConfig');

moveKeysBlender = blendConfigs.moveKeysBlender, depracatedKeysBlender = blendConfigs.depracatedKeysBlender, templateBlender = blendConfigs.templateBlender, dependenciesBindingsBlender = blendConfigs.dependenciesBindingsBlender, bundleBuildBlender = blendConfigs.bundleBuildBlender;

_ref = require('../helpers'), deepEqual = _ref.deepEqual, likeAB = _ref.likeAB, likeBA = _ref.likeBA, ok = _ref.ok, equal = _ref.equal, notEqual = _ref.notEqual;

arrayizePushBlender = new _B.ArrayizePushBlender;

ResourceConverter = require('../../code/config/ResourceConverter');

resources = [
  [
    '$+cofreescript', ['**/*.coffee', /.*\.(coffee\.md|litcoffee)$/i, '!**/*.amd.coffee'], function(source) {
      return source;
    }, function(filename) {
      return filename.replace('.coffee', '.js');
    }
  ], [
    '!Streamline', 'I am the Streamline descr', '**/*._*', function(source) {
      return source;
    }, function(filename) {
      return filename.replace('._js', '.js');
    }
  ], {
    name: '#|NonModule',
    filez: '**/*.nonmodule',
    convert: function() {}
  }, [
    '@~AFileResource', '**/*.ext', function(source) {
      return source;
    }
  ], {
    name: '#IamAFalseModule',
    filez: '**/*.module',
    convert: function() {}
  }, function() {
    var rc;
    rc = this('cofreescript');
    rc.name = 'coffeescript';
    return null;
  }
];

expectedResources = [
  {
    ' name': 'coffeescript',
    descr: 'No descr for ResourceConverter \'cofreescript\'',
    filez: ['**/*.coffee', /.*\.(coffee\.md|litcoffee)$/i, '!**/*.amd.coffee'],
    convert: resources[0][2],
    ' convFilename': resources[0][3],
    _convFilename: resources[0][3],
    ' type': 'module',
    isTerminal: false,
    isAfterTemplate: false,
    isBeforeTemplate: true,
    isMatchSrcFilename: false
  }, {
    ' name': 'Streamline',
    descr: 'I am the Streamline descr',
    filez: '**/*._*',
    convert: resources[1][3],
    ' convFilename': resources[1][4],
    _convFilename: resources[1][4],
    isTerminal: false,
    isAfterTemplate: true,
    isBeforeTemplate: false,
    isMatchSrcFilename: false
  }, {
    ' name': 'NonModule',
    descr: 'No descr for ResourceConverter \'NonModule\'',
    filez: '**/*.nonmodule',
    convert: resources[2].convert,
    ' type': 'text',
    isTerminal: true,
    isAfterTemplate: false,
    isBeforeTemplate: false,
    isMatchSrcFilename: false
  }, {
    ' name': 'AFileResource',
    descr: 'No descr for ResourceConverter \'AFileResource\'',
    filez: '**/*.ext',
    convert: resources[3][2],
    ' type': 'file',
    isTerminal: false,
    isAfterTemplate: false,
    isBeforeTemplate: false,
    isMatchSrcFilename: true
  }, {
    ' name': 'IamAFalseModule',
    descr: 'No descr for ResourceConverter \'IamAFalseModule\'',
    filez: '**/*.module',
    convert: resources[4].convert,
    ' type': 'text',
    isTerminal: false,
    isAfterTemplate: false,
    isBeforeTemplate: false,
    isMatchSrcFilename: false
  }
];

describe('`MasterDefaultsConfig` consistency', function() {
  return it("No same name keys in bundle & build ", function() {
    return ok(_B.isDisjoint(_.keys(MasterDefaultsConfig.bundle), _.keys(MasterDefaultsConfig.build)));
  });
});

describe('blendConfigs & its Blenders: ', function() {
  describe('moveKeysBlender:', function() {
    var result, rootLevelKeys;
    rootLevelKeys = {
      name: 'myBundle',
      main: 'myMainLib',
      bundle: {
        main: 'myLib'
      },
      path: "/some/path",
      webRootMap: ".",
      dependencies: {
        depsVars: {},
        exports: {
          bundle: {}
        }
      },
      dstPath: "",
      forceOverwriteSources: false,
      template: {
        name: "UMD"
      },
      watch: false,
      noRootExports: false,
      scanAllow: false,
      allNodeRequires: false,
      verbose: false,
      debugLevel: 0,
      done: function() {}
    };
    result = moveKeysBlender.blend(rootLevelKeys);
    it("result is NOT the srcObject", function() {
      return notEqual(result, rootLevelKeys);
    });
    it("Copies keys from the 'root' of src, to either `dst.bundle` or `dst.build`, depending on where keys are on `MasterDefaultsConfig`", function() {
      return deepEqual(result, {
        bundle: {
          name: 'myBundle',
          main: 'myLib',
          path: "/some/path",
          webRootMap: ".",
          dependencies: {
            depsVars: {},
            exports: {
              bundle: {}
            }
          }
        },
        build: {
          dstPath: "",
          forceOverwriteSources: false,
          template: {
            name: "UMD"
          },
          watch: false,
          noRootExports: false,
          scanAllow: false,
          allNodeRequires: false,
          verbose: false,
          debugLevel: 0,
          done: rootLevelKeys.done
        }
      });
    });
    it("it gives precedence to items in 'bundle' and 'build' hashes, over root items.", function() {
      return deepEqual(moveKeysBlender.blend({
        main: 'myMainLib',
        bundle: {
          main: 'myLib'
        },
        dstPath: "/some/OTHER/path",
        build: {
          dstPath: "/some/path"
        }
      }), {
        bundle: {
          main: 'myLib'
        },
        build: {
          dstPath: "/some/path"
        }
      });
    });
    return it("ignores root keys deemed irrelevant (not exist on `MasterDefaultsConfig`'s `.build` or `.bundle`.)", function() {
      return deepEqual(moveKeysBlender.blend({
        iRReLeVaNt_key_is_Ignored: true,
        name: 'myBundle',
        bundle: {
          bundle_iRReLeVaNt_key_is_NOT_Ignored: true,
          path: "/some/path"
        }
      }), {
        bundle: {
          bundle_iRReLeVaNt_key_is_NOT_Ignored: true,
          name: 'myBundle',
          path: "/some/path"
        }
      });
    });
  });
  describe("depracatedKeysBlender:", function() {
    return it("renames DEPRACATED keys to their new name", function() {
      var oldCfg;
      oldCfg = {
        bundle: {
          bundlePath: "source/code",
          main: "index",
          filespecs: '*.*',
          ignore: [/^draft/],
          dependencies: {
            noWeb: 'util',
            bundleExports: {
              lodash: '_'
            },
            _knownVariableNames: {
              jquery: '$'
            }
          }
        }
      };
      return deepEqual(depracatedKeysBlender.blend(oldCfg), {
        bundle: {
          path: 'source/code',
          main: 'index',
          filez: '*.*',
          ignore: [/^draft/],
          dependencies: {
            node: 'util',
            exports: {
              bundle: {
                lodash: '_'
              }
            },
            _knownDepsVars: {
              jquery: '$'
            }
          }
        }
      });
    });
  });
  describe("templateBlender:", function() {
    describe("template is a String:", function() {
      it("converts to {name:'TheString'} ", function() {
        return deepEqual(templateBlender.blend('UMD'), {
          name: 'UMD'
        });
      });
      it("converts & blends to {name:'TheString'} ", function() {
        return deepEqual(templateBlender.blend({}, {
          name: 'UMD',
          otherRandomOption: 'someRandomValue'
        }, {}, 'UMD'), {
          name: 'UMD',
          otherRandomOption: 'someRandomValue'
        });
      });
      return it("resets dest Object if src name is changed", function() {
        return deepEqual(templateBlender.blend({}, {
          name: 'UMD',
          otherRandomOption: 'someRandomValue'
        }, {}, 'combined'), {
          name: 'combined'
        });
      });
    });
    return describe("template is {}:", function() {
      it("blends to existing ", function() {
        return deepEqual(templateBlender.blend({}, {
          name: 'UMD',
          otherRandomOption: 'someRandomValue'
        }, {}, {
          name: 'UMD'
        }), {
          name: 'UMD',
          otherRandomOption: 'someRandomValue'
        });
      });
      return it("resets dest Object if template.name is changed", function() {
        return deepEqual(templateBlender.blend({}, {
          name: 'UMD',
          otherRandomOption: 'someRandomValue'
        }, {}, {
          name: 'combined'
        }), {
          name: 'combined'
        });
      });
    });
  });
  describe("blending config with ResourceConverters :", function() {
    return it("converts array of RC-specs' into array of RC-instances", function() {
      var resultRCs;
      resultRCs = blendConfigs([
        {
          resources: resources
        }
      ]);
      return deepEqual(resultRCs.bundle.resources, expectedResources);
    });
  });
  describe("dependenciesBindingsBlender converts to proper dependenciesBinding structure", function() {
    it("converts undefined to an empty {}", function() {
      return deepEqual(dependenciesBindingsBlender.blend(void 0), {});
    });
    it("converts String: `'lodash'`  --->   `{lodash:[]}`", function() {
      deepEqual(dependenciesBindingsBlender.blend('lodash'), {
        lodash: []
      });
      deepEqual(dependenciesBindingsBlender.blend(void 0, 'lodash', 'jquery'), {
        lodash: [],
        jquery: []
      });
      return deepEqual(dependenciesBindingsBlender.blend({
        knockout: ['ko']
      }, 'lodash', 'jquery', void 0), {
        knockout: ['ko'],
        lodash: [],
        jquery: []
      });
    });
    it("converts Array<String>: `['lodash', 'jquery']` ---> `{lodash:[], jquery:[]}`", function() {
      deepEqual(dependenciesBindingsBlender.blend(['lodash', 'jquery']), {
        lodash: [],
        jquery: []
      });
      return deepEqual(dependenciesBindingsBlender.blend({
        lodash: '_',
        knockout: ['ko']
      }, ['lodash', 'jquery']), {
        lodash: ['_'],
        knockout: ['ko'],
        jquery: []
      });
    });
    it("converts Object {lodash:['_'], jquery: '$'}` = {lodash:['_'], jquery: ['$']}`", function() {
      return deepEqual(dependenciesBindingsBlender.blend({
        lodash: ['_'],
        jquery: '$'
      }), {
        lodash: ['_'],
        jquery: ['$']
      });
    });
    it("blends {lodash:['_'], jquery: ['$']} <-- {knockout:['ko'], jquery: ['jQuery']}`", function() {
      return deepEqual(dependenciesBindingsBlender.blend({
        lodash: '_',
        jquery: ['$', 'jquery']
      }, {
        knockout: ['ko', 'Knockout'],
        jquery: 'jQuery'
      }), {
        lodash: ['_'],
        knockout: ['ko', 'Knockout'],
        jquery: ['$', 'jquery', 'jQuery']
      });
    });
    return it("converts from all in chain ", function() {
      return deepEqual(dependenciesBindingsBlender.blend({}, 'myLib', {
        lodash: ['_'],
        jquery: '$'
      }, ['uberscore', 'uderive'], {
        jquery: 'jQuery'
      }, 'urequire', {
        'uberscore': ['rules']
      }), {
        myLib: [],
        lodash: ['_'],
        jquery: ['$', 'jQuery'],
        uberscore: ['rules'],
        uderive: [],
        urequire: []
      });
    });
  });
  return describe("`blendConfigs`:", function() {
    describe("`bundle: dependencies`:", function() {
      it("exports.bundle String depBindings is turned to {dep:[]}", function() {
        return deepEqual(blendConfigs([
          {
            dependencies: {
              exports: {
                bundle: 'lodash'
              }
            }
          }
        ]), {
          bundle: {
            dependencies: {
              exports: {
                bundle: {
                  'lodash': []
                }
              }
            }
          }
        });
      });
      it("exports: bundle Array<String> depBindings is turned to {dep1:[], dep2:[]}", function() {
        return deepEqual(blendConfigs([
          {
            dependencies: {
              exports: {
                bundle: ['lodash', 'jquery']
              }
            }
          }
        ]), {
          bundle: {
            dependencies: {
              exports: {
                bundle: {
                  'lodash': [],
                  'jquery': []
                }
              }
            }
          }
        });
      });
      it("exports: bundle {} - depBindings is `arrayize`d", function() {
        return deepEqual(blendConfigs([
          {
            dependencies: {
              exports: {
                bundle: {
                  'lodash': '_'
                }
              }
            }
          }
        ]), {
          bundle: {
            dependencies: {
              exports: {
                bundle: {
                  'lodash': ['_']
                }
              }
            }
          }
        });
      });
      return it("exports: bundle {} - depBinding reseting its array", function() {
        return deepEqual(blendConfigs([
          {}, {
            dependencies: {
              exports: {
                bundle: {
                  'uberscore': [[null], '_B']
                }
              }
            }
          }, {}, {
            dependencies: {
              exports: {
                bundle: {
                  'uberscore': ['uberscore', 'uuuuB']
                }
              }
            }
          }
        ]), {
          bundle: {
            dependencies: {
              exports: {
                bundle: {
                  'uberscore': ['_B']
                }
              }
            }
          }
        });
      });
    });
    return describe("Nested & derived configs:", function() {
      var blended, configs, configsClone;
      configs = [
        {}, {
          dependencies: {
            node: ['fs'],
            exports: {
              bundle: {
                lodash: "_",
                backbone: ['Backbone', 'BB']
              }
            }
          },
          filez: ['**/*.coffee.md', '**/*.ls'],
          copy: /./,
          dstPath: "build/code",
          template: 'UMD'
        }, {
          bundle: {
            path: "source/code",
            filez: ['**/*.litcoffee'],
            copy: ['**/*.html'],
            ignore: [/^draft/],
            dependencies: {
              node: 'util',
              exports: {
                bundle: {
                  uberscore: [[null], '_B']
                }
              }
            }
          },
          verbose: true,
          derive: {
            debugLevel: 90
          }
        }, {}, {
          bundlePath: "sourceSpecDir",
          main: 'index',
          filez: '**/*.*',
          resources: resources.slice(2),
          dependencies: {
            variableNames: {
              uberscore: '_B'
            },
            bundleExports: {
              chai: 'chai',
              uberscore: ['uberscore', 'B', 'B_'],
              'spec-data': 'data'
            }
          },
          dstPath: "some/useless/default/path"
        }, {
          dependencies: {
            bundleExports: ['backbone', 'unusedDep']
          }
        }, {
          dependencies: {
            bundleExports: 'dummyDep'
          }
        }, {}, {
          derive: [
            {
              dependencies: {
                exports: {
                  bundle: {
                    'spec-data': 'dataInDerive1'
                  }
                }
              }
            }, {
              derive: {
                derive: {
                  resources: resources.slice(0, 2),
                  derive: {
                    copy: ['!**/*.*'],
                    template: {
                      name: 'combined',
                      dummyOption: 'dummy'
                    }
                  }
                }
              },
              dependencies: {
                exports: {
                  bundle: {
                    'spec-data': 'dataInDerive2'
                  }
                }
              },
              verbose: false
            }
          ]
        }
      ];
      configsClone = _.clone(configs, true);
      blended = blendConfigs(configs);
      it("blending doesn't mutate source configs:", function() {
        return deepEqual(configs, configsClone);
      });
      it("correctly derives from many & nested user configs:", function() {
        return deepEqual(blended, {
          bundle: {
            path: "source/code",
            main: "index",
            filez: ['**/*.*', '**/*.litcoffee', '!', /^draft/, '**/*.coffee.md', '**/*.ls'],
            copy: ['!**/*.*', '**/*.html', /./],
            resources: expectedResources,
            dependencies: {
              node: ['util', 'fs'],
              exports: {
                bundle: {
                  'spec-data': ['dataInDerive2', 'dataInDerive1', 'data'],
                  chai: ['chai'],
                  uberscore: ['_B'],
                  lodash: ['_'],
                  backbone: ['Backbone', 'BB'],
                  unusedDep: [],
                  dummyDep: []
                }
              },
              depsVars: {
                uberscore: ['_B']
              }
            }
          },
          build: {
            verbose: true,
            dstPath: "build/code",
            debugLevel: 90,
            template: {
              name: "UMD"
            }
          }
        });
      });
      it("all {} in bundle.resources are instanceof ResourceConverter :", function() {
        var resConv, _i, _len, _ref1, _results;
        _ref1 = blended.bundle.resources;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          resConv = _ref1[_i];
          _results.push(ok(resConv instanceof ResourceConverter));
        }
        return _results;
      });
      return it("`bundle.resources` are reset with [null] as 1st item", function() {
        var freshResources;
        freshResources = blendConfigs([
          {
            resources: [[null], expectedResources[0]]
          }, blended
        ]);
        blended.bundle.resources = [expectedResources[0]];
        return deepEqual(freshResources, blended);
      });
    });
  });
});
