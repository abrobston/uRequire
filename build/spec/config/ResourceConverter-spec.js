// Generated by CoffeeScript 1.6.3
var ResourceConverter, assert, chai, deepEqual, expect, expectedRc, l, likeAB, likeBA, rcSpec1, _, _B, _ref;

chai = require('chai');

assert = chai.assert;

expect = chai.expect;

_B = require('uberscore');

l = new _B.Logger('urequire/ResourceConverter-spec');

_ = require('lodash');

ResourceConverter = require('../../code/config/ResourceConverter');

_ref = require('../helpers'), deepEqual = _ref.deepEqual, likeAB = _ref.likeAB, likeBA = _ref.likeBA;

rcSpec1 = [
  '$Coffeescript', ['**/*.coffee', /.*\.(coffee\.md|litcoffee)$/i, '!**/*.amd.coffee'], function(source) {
    return source;
  }, function(filename) {
    return filename.replace('.coffee', '.js');
  }
];

expectedRc = {
  ' type': 'module',
  ' name': 'Coffeescript',
  descr: 'No descr for ResourceConverter \'Coffeescript\'',
  filez: ['**/*.coffee', /.*\.(coffee\.md|litcoffee)$/i, '!**/*.amd.coffee'],
  convert: rcSpec1[2],
  ' convFilename': rcSpec1[3],
  _convFilename: rcSpec1[3],
  isTerminal: false,
  isAfterTemplate: false,
  isBeforeTemplate: false,
  isMatchSrcFilename: false
};

describe('ResourceConverter creation, cloning & updating:', function() {
  var initialRegistryKeys, rc, rc1, rc2, rcIdx, _fn, _i, _len, _ref1;
  initialRegistryKeys = _.keys(ResourceConverter.registry);
  rc1 = new ResourceConverter(rcSpec1);
  rc2 = rc1.clone();
  _ref1 = [rc1, rc2, rc2.clone()];
  _fn = function(rc, rcIdx) {
    return describe("ResourceConverter creation & updates (for " + (rcIdx ? 'clone() #' + rcIdx : 'original instance') + "):", function() {
      describe("creates correct RC instance from an rc-spec:", function() {
        it("deep equal", function() {
          return deepEqual(rc, expectedRc);
        });
        it("clazz.name", function() {
          return expect(rc.clazz.name).to.equal('Module');
        });
        it("type", function() {
          return expect(rc.type).to.equal('module');
        });
        it("convFilename", function() {
          return expect(rc.convFilename).to.equal(rcSpec1[3]);
        });
        return it("all clones are equal", function() {
          return deepEqual(rc, rc.clone());
        });
      });
      return describe("updating:", function() {
        it("`type` on instance, updates hidden clazz field", function() {
          rc.type = 'text';
          expect(rc[' type']).to.equal('text');
          expect(rc['type']).to.equal('text');
          return expect(rc.clazz.name).to.equal('TextResource');
        });
        it("`name` on instance, updates all relevant fields", function() {
          rc.name = '$~!aNewName';
          expect(rc.name).to.equal('aNewName');
          expect(rc.clazz.name).to.equal('Module');
          expect(rc.type).to.equal('module');
          expect(rc[' type']).to.equal('module');
          return expect(rc.isAfterTemplate).to.equal(true);
        });
        it("`convFilename` as a '.changeExt' String, updates relevant fields", function() {
          rc.convFilename = '.javascript';
          expect(rc[' convFilename']).to.equal('.javascript');
          expect(rc.convFilename).to.be.a.Function;
          expect(rc.convFilename).to.not.be.equal(rcSpec1[2]);
          return expect(rc.convFilename('myFilename.coffee')).to.equal('myFilename.javascript');
        });
        it("`convFilename` as a '.changeExt' String (srcFilename), updates relevant fields", function() {
          rc.convFilename = '~.javascript';
          expect(rc[' convFilename']).to.equal('~.javascript');
          expect(rc.convFilename).to.be.a.Function;
          expect(rc.convFilename).to.not.be.equal(rcSpec1[2]);
          return expect(rc.convFilename('myFilename.coffee', 'mySrcFilename.coffee')).to.equal('mySrcFilename.javascript');
        });
        return it.skip("No RC added to registry", function() {
          expect(_.keys(ResourceConverter.registry).length).to.equal(initialRegistryKeys.length);
          return expect(_B.isEqualArraySet(_.keys(ResourceConverter.registry), initialRegistryKeys)).to.be["true"];
        });
      });
    });
  };
  for (rcIdx = _i = 0, _len = _ref1.length; _i < _len; rcIdx = ++_i) {
    rc = _ref1[rcIdx];
    _fn(rc, rcIdx);
  }
  null;
  describe("ResourceConverter .clone():", function() {
    var rc1Clone;
    rc1Clone = rc1.clone();
    return it("is equal with original", function() {
      expect(_.isEqual(rc1, rc1Clone));
      expect(rc1.convert === rc1Clone.convert);
      expect(rc1.convFilename === rc1Clone.convFilename);
      return expect(rc1Clone.convFilename('bla.coffee') === 'bla.js');
    });
  });
  return describe("ResourceConverter.registry :", function() {
    var foundRc, newRc, rcClone;
    rc = rcClone = newRc = foundRc = void 0;
    describe("Registering ResourceConverters basics:", function() {
      it("Creates correct instance from rcSpec", function() {
        return rc = newRc = ResourceConverter.searchRegisterUpdate(rcSpec1);
      });
      it("identical clones only update ", function() {
        rcClone = rc.clone();
        expect(rc !== rcClone).to.be["true"];
        deepEqual(rc, expectedRc);
        deepEqual(rcClone, expectedRc);
        newRc = ResourceConverter.searchRegisterUpdate(rcClone);
        return expect(newRc).to.equal(rc);
      });
      it("The instance is registered", function() {
        expect(ResourceConverter.registry[rc.name]).to.be.equal(rc);
        expect(ResourceConverter.searchRegisterUpdate(rc.name) === rc);
        return expect(ResourceConverter.searchRegisterUpdate(rcSpec1) === rc);
      });
      it("Updates instance from another instance", function() {
        rc = ResourceConverter.searchRegisterUpdate(rcClone);
        expect(rc).to.not.be.equal(rcClone);
        expect(rc).to.be.equal(newRc);
        return deepEqual(rc, expectedRc);
      });
      it("Updates instance from another instance, returned from a function", function() {
        rc = ResourceConverter.searchRegisterUpdate(function() {
          return rcClone;
        });
        expect(rc).to.not.be.equal(rcClone);
        expect(rc).to.be.equal(newRc);
        return deepEqual(rc, expectedRc);
      });
      return it("Updates instance from a rcSpec, returned from nested functions", function() {
        rc = ResourceConverter.searchRegisterUpdate(function() {
          return function() {
            return function() {
              return rcSpec1;
            };
          };
        });
        expect(rc).to.not.be.equal(rcSpec1);
        expect(rc).to.be.equal(newRc);
        return deepEqual(rc, expectedRc);
      });
    });
    describe("Searching for ResourceConverters:", function() {
      it("The instance is retrieved via `search by name`", function() {
        foundRc = ResourceConverter.searchRegisterUpdate(rc.name);
        expect(foundRc).to.be.equal(rc);
        return deepEqual(foundRc, expectedRc);
      });
      it("The instance is retrieved passing a function with `search by name` as context", function() {
        foundRc = ResourceConverter.searchRegisterUpdate(function() {
          return this(rc.name);
        });
        expect(foundRc).to.be.equal(rc);
        return deepEqual(foundRc, expectedRc);
      });
      it("some funky ->->->", function() {
        foundRc = ResourceConverter.searchRegisterUpdate(function() {
          return function() {
            return function() {
              return function() {
                return this(rc.name);
              };
            };
          };
        });
        expect(foundRc).to.be.equal(rc);
        return deepEqual(foundRc, expectedRc);
      });
      it("Searched instance is updated via search flags", function() {
        var expectedRcWithAppliedFlags, flagsToApply;
        flagsToApply = '!#';
        expectedRcWithAppliedFlags = _.extend(_.clone(expectedRc, true), {
          isAfterTemplate: true,
          ' type': 'text'
        });
        foundRc = ResourceConverter.searchRegisterUpdate(function() {
          return this(flagsToApply + rc.name);
        });
        expect(foundRc).to.be.equal(rc);
        return deepEqual(foundRc, expectedRcWithAppliedFlags);
      });
      it("Searching via an Array, returns a registered RC", function() {
        foundRc = ResourceConverter.searchRegisterUpdate(rcSpec1);
        expect(foundRc).to.be.equal(rc);
        return deepEqual(foundRc, expectedRc);
      });
      it("Registering a function that returns an Array, returns a registered RC", function() {
        foundRc = ResourceConverter.searchRegisterUpdate(function() {
          return this(rcSpec1);
        });
        expect(foundRc).to.be.equal(rc);
        return deepEqual(foundRc, expectedRc);
      });
      it("Searching via an Array spec of a new RC, returns a newly creatred/registered RC", function() {
        var rcspec;
        rcspec = _.clone(rcSpec1, true);
        rcspec[0] = '$Livescript';
        rcspec[1] = ['**/*.ls'];
        foundRc = ResourceConverter.searchRegisterUpdate(function() {
          return function() {
            return this(rcspec);
          };
        });
        expect(foundRc).to.not.be.equal(rc);
        expect(foundRc instanceof ResourceConverter).to.be["true"];
        foundRc.name = '#LivescriptTextResource';
        deepEqual(foundRc, {
          ' type': 'text',
          ' name': 'LivescriptTextResource',
          descr: 'No descr for ResourceConverter \'Livescript\'',
          filez: ['**/*.ls'],
          convert: rcSpec1[2],
          ' convFilename': rcSpec1[3],
          _convFilename: rcSpec1[3],
          isTerminal: false,
          isAfterTemplate: false,
          isBeforeTemplate: false,
          isMatchSrcFilename: false
        });
        return expect(foundRc.convFilename === rcSpec1[3]).to.be["true"];
      });
      return it("Searching for a non registered name throws error", function() {
        return expect(function() {
          return ResourceConverter.searchRegisterUpdate('foo');
        }).to["throw"](Error);
      });
    });
    describe("Registering ResourceConverters behavior: ", function() {
      it("Registering a renamed already registered instance, renames its registry key", function() {
        ResourceConverter.searchRegisterUpdate(function() {
          return _.extend(this(rc.name), {
            name: 'someOtherNewName'
          });
        });
        expect(ResourceConverter.registry['someOtherNewName']).to.equal(newRc);
        return expect(ResourceConverter.searchRegisterUpdate('someOtherNewName')).to.equal(newRc);
      });
      it("Renaming a registered instance, renames its registry key", function() {
        newRc.name = 'someOtherName';
        expect(ResourceConverter.registry['someOtherName']).to.equal(newRc);
        return expect(ResourceConverter.searchRegisterUpdate('someOtherName')).to.equal(newRc);
      });
      return it.skip("Two more RC are added to registry", function() {
        return expect(_.keys(ResourceConverter.registry).length).to.equal(initialRegistryKeys.length + 2);
      });
    });
    return describe("accepts null and undefined, they just dont get registered", function() {
      it("accepts null", function() {
        deepEqual(new ResourceConverter(null), {});
        return deepEqual(ResourceConverter.searchRegisterUpdate(null), {});
      });
      return it("accepts undefined", function() {
        deepEqual(new ResourceConverter(void 0), {});
        return deepEqual(ResourceConverter.searchRegisterUpdate(void 0), {});
      });
    });
  });
});
