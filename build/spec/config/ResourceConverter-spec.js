// Generated by CoffeeScript 1.6.3
var ResourceConverter, assert, chai, expect, expectedRc, l, rcSpec1, _, _B;

chai = require('chai');

assert = chai.assert;

expect = chai.expect;

_B = require('uberscore');

l = new _B.Logger('urequire/ResourceConverter-spec');

_ = require('lodash');

ResourceConverter = require('../../code/config/ResourceConverter');

rcSpec1 = [
  '$Coffeescript', ['**/*.coffee', /.*\.(coffee\.md|litcoffee)$/i, '!**/*.amd.coffee'], function(source) {
    return source;
  }, function(filename) {
    return filename.replace('.coffee', '.js');
  }
];

expectedRc = {
  ' type': 'module',
  ' name': 'Coffeescript',
  descr: 'No descr for ResourceConverter \'Coffeescript\'',
  filez: ['**/*.coffee', /.*\.(coffee\.md|litcoffee)$/i, '!**/*.amd.coffee'],
  convert: rcSpec1[2],
  ' convFilename': rcSpec1[3],
  isTerminal: false,
  isAfterTemplate: false,
  isBeforeTemplate: false,
  isMatchSrcFilename: false
};

describe('ResourceConverter creation, cloning & updating:', function() {
  var initialRegistryKeys, rc, rc1, rc2, rcIdx, _fn, _i, _len, _ref;
  initialRegistryKeys = _.keys(ResourceConverter.registry);
  rc1 = new ResourceConverter(rcSpec1);
  rc2 = rc1.clone();
  _ref = [rc1, rc2, rc2.clone()];
  _fn = function(rc, rcIdx) {
    return describe("ResourceConverter creation & updates (for " + (rcIdx ? 'clone() #' + rcIdx : 'original instance') + "):", function() {
      it("created correct RC instance from an rc-spec", function() {
        expect(rc).to.deep.equal(expectedRc);
        expect(rc.clazz.name).to.equal('Module');
        expect(rc.type).to.equal('module');
        return expect(rc.convFilename).to.equal(rcSpec1[3]);
      });
      it("all clones are equal", function() {
        return expect(rc).to.deep.equal(rc.clone());
      });
      it("updating `type` on instance, updates hidden clazz field", function() {
        rc.type = 'text';
        expect(rc[' type']).to.equal('text');
        expect(rc['type']).to.equal('text');
        return expect(rc.clazz.name).to.equal('TextResource');
      });
      it("updating `name` on instance, updates all relevant fields", function() {
        rc.name = '$~!aNewName';
        expect(rc.clazz.name).to.equal('Module');
        expect(rc.type).to.equal('module');
        expect(rc[' type']).to.equal('module');
        return expect(rc.isAfterTemplate).to.equal(true);
      });
      it("updating `convFilename` as a '.changeExt' String, updates relevant fields", function() {
        rc.convFilename = '.javascript';
        expect(rc[' convFilename']).to.equal('.javascript');
        expect(rc.convFilename).to.be.a.Function;
        expect(rc.convFilename).to.not.be.equal(rcSpec1[2]);
        return expect(rc.convFilename('myFilename.coffee')).to.equal('myFilename.javascript');
      });
      it("updating `convFilename` as a '.changeExt' String (srcFilename), updates relevant fields", function() {
        rc.convFilename = '~.javascript';
        expect(rc[' convFilename']).to.equal('~.javascript');
        expect(rc.convFilename).to.be.a.Function;
        expect(rc.convFilename).to.not.be.equal(rcSpec1[2]);
        return expect(rc.convFilename('myFilename.coffee', 'mySrcFilename.coffee')).to.equal('mySrcFilename.javascript');
      });
      return it.skip("No RC added to registry", function() {
        expect(_.keys(ResourceConverter.registry).length).to.equal(initialRegistryKeys.length);
        return expect(_B.isEqualArraySet(_.keys(ResourceConverter.registry), initialRegistryKeys)).to.be["true"];
      });
    });
  };
  for (rcIdx = _i = 0, _len = _ref.length; _i < _len; rcIdx = ++_i) {
    rc = _ref[rcIdx];
    _fn(rc, rcIdx);
  }
  null;
  return describe("ResourceConverter registry (static `registry` {} & `register` & `search` functions):", function() {
    var foundRc, newRc, rcClone;
    rc = rcClone = newRc = foundRc = void 0;
    describe("Registering ResourceConverters basics:", function() {
      it("Creates correct instance from rcSpec", function() {
        rc = newRc = ResourceConverter.register(rcSpec1);
        rcClone = rc.clone();
        return expect(rc).to.deep.equal(expectedRc);
      });
      it("Updates instance from another instance", function() {
        rc = ResourceConverter.register(rcClone);
        expect(rc).to.not.be.equal(rcClone);
        expect(rc).to.be.equal(newRc);
        return expect(rc).to.deep.equal(expectedRc);
      });
      it("Updates instance from another instance, returned from a function", function() {
        rc = ResourceConverter.register(function() {
          return rcClone;
        });
        expect(rc).to.not.be.equal(rcClone);
        expect(rc).to.be.equal(newRc);
        return expect(rc).to.deep.equal(expectedRc);
      });
      return it("Updates instance from a rcSpec, returned from a function", function() {
        rc = ResourceConverter.register(rcSpec1);
        expect(rc).to.not.be.equal(rcSpec1);
        expect(rc).to.be.equal(newRc);
        return expect(rc).to.deep.equal(expectedRc);
      });
    });
    describe("Searching for ResourceConverters:", function() {
      it("The instance is retrieved via `search by name`", function() {
        foundRc = ResourceConverter.search(rc.name);
        expect(foundRc).to.be.equal(rc);
        return expect(foundRc).to.deep.equal(expectedRc);
      });
      it("The instance is retrieved on 'register', passing a function with `search by name` as context", function() {
        foundRc = ResourceConverter.register(function() {
          return this(rc.name);
        });
        expect(foundRc).to.be.equal(rc);
        return expect(foundRc).to.deep.equal(expectedRc);
      });
      it("some funky ->->->", function() {
        foundRc = ResourceConverter.register(function() {
          return function() {
            return function() {
              return function() {
                return this(rc.name);
              };
            };
          };
        });
        expect(foundRc).to.be.equal(rc);
        return expect(foundRc).to.deep.equal(expectedRc);
      });
      it("Searched instance is updated via search flags", function() {
        var expectedRcWithAppliedFlags, flagsToApply;
        flagsToApply = '!#';
        expectedRcWithAppliedFlags = _.extend(_.clone(expectedRc, true), {
          isAfterTemplate: true,
          ' type': 'text'
        });
        foundRc = ResourceConverter.register(function() {
          return this(flagsToApply + rc.name);
        });
        expect(foundRc).to.be.equal(rc);
        return expect(foundRc).to.deep.equal(expectedRcWithAppliedFlags);
      });
      it("Searching via an Array, returns a registered RC", function() {
        foundRc = ResourceConverter.search(rcSpec1);
        expect(foundRc).to.be.equal(rc);
        return expect(foundRc).to.deep.equal(expectedRc);
      });
      it("Registering a function that returns an Array, returns a registered RC", function() {
        foundRc = ResourceConverter.register(function() {
          return this(rcSpec1);
        });
        expect(foundRc).to.be.equal(rc);
        return expect(foundRc).to.deep.equal(expectedRc);
      });
      it("Searching via an Array spec of a new RC, returns a newly creatred/registered RC", function() {
        var rcspec;
        rcspec = _.clone(rcSpec1, true);
        rcspec[0] = '$Livescript';
        rcspec[1] = ['**/*.ls'];
        foundRc = ResourceConverter.search(function() {
          return function() {
            return this(rcspec);
          };
        });
        expect(foundRc).to.not.be.equal(rc);
        expect(foundRc instanceof ResourceConverter).to.be["true"];
        foundRc.name = '#LivescriptTextResource';
        return expect(foundRc).to.deep.equal({
          ' type': 'text',
          ' name': 'LivescriptTextResource',
          descr: 'No descr for ResourceConverter \'Livescript\'',
          filez: ['**/*.ls'],
          convert: rcSpec1[2],
          ' convFilename': rcSpec1[3],
          isTerminal: false,
          isAfterTemplate: false,
          isBeforeTemplate: false,
          isMatchSrcFilename: false
        });
      });
      return it("Searching for a non registered name throws error", function() {
        var err;
        try {
          ResourceConverter.search('foo');
        } catch (_error) {
          err = _error;
        }
        return expect(err instanceof Error).to.be["true"];
      });
    });
    describe("Registering ResourceConverters behavior: ", function() {
      it("Registration with same name, updates (but not overwrites) instance", function() {
        newRc = ResourceConverter.register(rcSpec1);
        expect(newRc).to.be.equal(rc);
        return expect(newRc).to.deep.equal(rcClone);
      });
      it("Registering a renamed already registered instance, renames its registry key", function() {
        ResourceConverter.register(function() {
          return _.extend(this(rc.name), {
            name: 'someOtherNewName'
          });
        });
        expect(ResourceConverter.registry['someOtherNewName']).to.equal(newRc);
        return expect(ResourceConverter.search('someOtherNewName')).to.equal(newRc);
      });
      it("Renaming a registered instance, renames its registry key", function() {
        newRc.name = 'someOtherName';
        expect(ResourceConverter.registry['someOtherName']).to.equal(newRc);
        return expect(ResourceConverter.search('someOtherName')).to.equal(newRc);
      });
      return it.skip("Two more RC are added to registry", function() {
        return expect(_.keys(ResourceConverter.registry).length).to.equal(initialRegistryKeys.length + 2);
      });
    });
    return describe("accepts null and undefined, they just dont get registered", function() {
      it("accepts null", function() {
        expect(new ResourceConverter(null)).to.deep.equal({});
        return expect(ResourceConverter.register(null)).to.deep.equal({});
      });
      return it("accepts undefined", function() {
        expect(new ResourceConverter(void 0)).to.deep.equal({});
        return expect(ResourceConverter.register(void 0)).to.deep.equal({});
      });
    });
  });
});
