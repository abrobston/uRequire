_ = require 'lodash'
_B = require 'uberscore'
l = new _B.Logger 'urequire/AlmondOptimizationTemplate'
Dependency = require '../fileResources/Dependency'
Template = require './Template'

module.exports =

class AlmondOptimizationTemplate extends Template

  constructor: (@bundle)->
    ### globals & exports.bundle handling.

     Assuming

       @bundle.globalDepsVars = {lodash: ['_'], jquery: ['$', 'jQuery']}
       @bundle.exportsBundleDepsVars = {lodash: ['_', '_lodash_'], 'agreement/isAgree': ['isAgree', 'isAgree2']}

    We need the following :
    ###
    # parameters the of factory: all variables of deps.exports.bundle that are global
    # i.e what goes in `var factory = function(_, _lodash_){...`
    @exportsBundleGlobalParams = []  #eg ['_', '_lodash_']

    # corresponding dependencies the of factory :
    # i.e   `define(['lodash', 'lodash', ...], factory);`
    #   and
    #       `module.exports = factory(require('lodash'), require('lodash'));`
    @exportsBundleGlobalDeps = [] # eg ['lodash', 'lodash']

    # decide type of each dependency in exports.bundle
    for bundleDep, bundleDepVars of @bundle.exportsBundleDepsVars
      bd  = new Dependency bundleDep, {path: '__rootOfBundle__', bundle:@bundle}
      switch bd.type
        when 'global' # mark it looks like a global
          @bundle.globalDepsVars[bundleDep] = bundleDepVars if not @bundle.globalDepsVars[bundleDep]
        #when 'bundle', 'notFoundInBundle', 'external', 'webRootMap', 'system' # do nothing @todo: what todo ?

    # set them up
    for dep, depVars of @bundle.exportsBundleDepsVars when @bundle.globalDepsVars[dep]
      for aVar in depVars
        if aVar not in @exportsBundleGlobalParams
          @exportsBundleGlobalParams.push aVar
          @exportsBundleGlobalDeps.push dep
    
    @exportsBundleNonGlobalsDepsVars = _.pick @bundle.exportsBundleDepsVars, (vars, dep)=> not @bundle.globalDepsVars[dep]

    @globalNonExportsBundleDepsVars = _.pick @bundle.globalDepsVars, (vars, dep)=> not @bundle.exportsBundleDepsVars[dep]
    @defineAMDDeps = @exportsBundleGlobalDeps.concat _.keys @globalNonExportsBundleDepsVars

  Object.defineProperties @::,

    wrap: get: ->
      start: """
        // Combined file generated by uRequire v#{require('../urequire').VERSION}, with help from r.js & almond
        (function (global){

          #{@runTimeDiscovery}

          var window = global, __nodeRequire = (__isNode ? require : void 0);

          #{if p = @bundle.mergedPreDefineIFINodesCode
              "// uRequire: start of mergedPreDefineIFINodesCode \n " + p +
              "\n  // uRequire: end of mergedPreDefineIFINodesCode"
            else ''}

          var factory = function(#{@exportsBundleGlobalParams.join ', '}) {
      """

      end: """\n
            #{
              # require (inside the factory, i.e AMD or nodejs depending on execution)
              # each bundle dependency with its variables, eg
              #   `var isAgree, isAgree2; isAgree = isAgree2 = require('agreement/isAgree');`
              # for all exports.bundle that are IN the bundle (i.e non-global)
            (do =>
                # exportsBundleNonGlobalsDepsVars = {'agreement/isAgree': ['isAgree', 'isAgree2'], ...}
                for dep, vars of @exportsBundleNonGlobalsDepsVars
                  # eg `var isAgree, isAgree2; isAgree = isAgree2 = require('agreement/isAgree');`
                  'var ' + vars.join(', ') + '; ' + vars.join(' = ') + " = require('#{dep}');"
            ).join '\n'}

            return require('#{@bundle.main}');
          };

          if (__isAMD) {
            define(#{
              # AMD runtime define is call with [] of deps with all @exportsBundleGlobalDeps, followed by all non-export.bundle globals deps
              # i.e `define(['lodash', ... ,'jquery'], factory);`
              if @defineAMDDeps.length
                "['" + @defineAMDDeps.join("', '") + "'], "
              else ''
            }factory);
          } else {
              if (__isNode) {
                  module.exports = factory(#{
                    if @exportsBundleGlobalDeps.length
                      "require('" + @exportsBundleGlobalDeps.join("'), require('") + "')"
                    else ''
                    });
              } else { // plain <script> tag - grab vars from 'window'
                  factory(#{@exportsBundleGlobalParams.join ', '});
              }
          }
        })(typeof exports === 'object' ? global : window);
      """

    # @return {
    #   lodash: 'getGlobal_lodash',
    #   backbone: 'getGlobal_backbone'
    # }
    paths: get:->
      _paths = {}
      for globalDep, globalVars of @bundle.globalDepsVars
        _paths[globalDep] = "getGlobal_#{globalDep}"

      for nodeOnlyDep of @bundle.nodeOnlyDepsVars
        _paths[nodeOnlyDep] = "getNodeOnly_#{nodeOnlyDep}"

      _paths

    # @return {
    #   getGlobal_lodash: "code",
    #   getGlobal_backbone: "code"
    # }
    dependencyFiles: get:->
      _dependencyFiles = {}
      for globalDep, globalVars of @bundle.globalDepsVars
        _dependencyFiles["getGlobal_#{globalDep}"] =
          @grabDependencyVarOrRequireIt globalDep, globalVars

      for nodeOnlyDep of @bundle.nodeOnlyDepsVars
        _dependencyFiles["getNodeOnly_#{nodeOnlyDep}"] =
          @grabDependencyVarOrRequireIt nodeOnlyDep, []

      _dependencyFiles

  grabDependencyVarOrRequireIt: (dep, depVars)->
    "define(" +
      @_function(
        (for depVar in depVars
            "if (typeof #{depVar} !== 'undefined'){return #{depVar};}"
        ).join(';') +
        "\nreturn __nodeRequire('#{dep}');"
      ) + ");"

